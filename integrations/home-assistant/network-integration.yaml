# ============================================================================
# Home Assistant Network Integration Configuration
# ============================================================================

# ============================================================================
# 1. NETWORK DEVICE TRACKING
# ============================================================================

# Device Tracker: Integration for discovering network devices via nmap scanning
# This discovers all devices on the network and tracks their online/offline status
device_tracker:
  - platform: nmap_tracker
    hosts: 192.168.1.0/24  # Adjust to match your network subnet
    home_interval: 10  # Minutes between scans when a device is home
    scan_options: " --privileged -sP "  # Fast ping scan
    exclude:
      - 192.168.1.1  # Exclude router to avoid false readings
    track_new_devices: true
    consider_home: 180  # Seconds to wait before marking device as away

  # Integration with UniFi (comment out if not using UniFi equipment)
  - platform: unifi
    host: 192.168.1.2  # IP of your UniFi Controller
    username: !secret unifi_username
    password: !secret unifi_password
    verify_ssl: false
    site_id: default
    detection_time: 300
    track_clients: true
    track_devices: true
    track_wired_clients: true
    ssid_filter:
      - 'HomeNet'
      - 'HomeNet_IoT'

# ============================================================================
# 2. BANDWIDTH MONITORING
# ============================================================================

# Speedtest.net integration for internet bandwidth monitoring
speedtestdotnet:
  scan_interval:
    minutes: 60
  monitored_conditions:
    - ping
    - download
    - upload
    - bytes_sent
    - bytes_received

# Integration with router via UPnP
sensor:
  - platform: upnp
    scan_interval:
      seconds: 30
    local_ip: 192.168.1.100  # Your Home Assistant IP
    ports:
      tcp: [80, 8123, 8080]
      udp: []

  # Example using SNMP for bandwidth monitoring if router supports it
  - platform: snmp
    name: Router WAN In
    host: 192.168.1.1  # Your router IP
    baseoid: 1.3.6.1.2.1.2.2.1.10.2  # Common OID for WAN in traffic
    accept_errors: true
    unit_of_measurement: "B/s"

  - platform: snmp
    name: Router WAN Out
    host: 192.168.1.1
    baseoid: 1.3.6.1.2.1.2.2.1.16.2  # Common OID for WAN out traffic
    accept_errors: true
    unit_of_measurement: "B/s"

  # AdGuard Home integration for DNS monitoring (if using AdGuard)
  - platform: adguard
    host: 192.168.1.5  # AdGuard Home IP address
    username: !secret adguard_username
    password: !secret adguard_password
    ssl: false
    verify_ssl: false
    monitored_conditions:
      - dns_queries
      - dns_queries_blocked
      - dns_queries_blocked_ratio
      - average_processing_speed
      - parental_control_blocked
      - safe_browsing_blocked
      - safe_searches_enforced
      - replaced_safesearch

# ============================================================================
# 3. PRESENCE DETECTION BASED ON NETWORK CONNECTIVITY
# ============================================================================

# Person configuration for presence detection (combine device trackers)
person:
  - name: John Doe
    id: johndoe
    user_id: 5fce8f3291294a90908a41d224eb2665  # Your HA user ID
    device_trackers:
      - device_tracker.johndoe_phone
      - device_tracker.johndoe_laptop
      - device_tracker.johndoe_watch

  - name: Jane Doe
    id: janedoe
    device_trackers:
      - device_tracker.janedoe_phone
      - device_tracker.janedoe_tablet

# Binary sensor for network-based presence
binary_sensor:
  - platform: template
    sensors:
      someone_home:
        friendly_name: 'Someone Home'
        value_template: >
          {{ is_state('person.johndoe', 'home') or
             is_state('person.janedoe', 'home') }}

      guest_devices_connected:
        friendly_name: 'Guest Devices'
        value_template: >
          {{ states('sensor.unifi_clients_guest') | int > 0 }}
        device_class: connectivity

# ============================================================================
# 4. INTEGRATION WITH NETWORK MANAGEMENT TOOLS
# ============================================================================

# DD-WRT integration (if using DD-WRT router)
rest:
  - scan_interval: 60
    resource: http://192.168.1.1/Status_Wireless.live.asp
    method: GET
    authentication: basic
    username: !secret ddwrt_username
    password: !secret ddwrt_password
    sensor:
      - name: "Wifi Clients"
        value_template: "{{ value_json.wireless.clientcount }}"
        unit_of_measurement: "clients"

# Mikrotik integration (if using Mikrotik router)
mikrotik:
  - name: Router
    host: 192.168.1.1
    username: !secret mikrotik_username
    password: !secret mikrotik_password
    port: 8728  # Default non-SSL port, use 8729 for SSL
    track_hosts: true
    track_hosts_timeout: 300 # seconds

# Pi-hole integration (if using Pi-hole)
pi_hole:
  - name: Pi-hole
    host: 192.168.1.4
    api_key: !secret pihole_api_key
    ssl: false
    verify_ssl: false
    monitored_conditions:
      - ads_blocked_today
      - ads_percentage_today
      - dns_queries_today
      - domains_being_blocked
      - unique_clients

# ============================================================================
# 5. NOTIFICATIONS FOR NETWORK EVENTS
# ============================================================================

# Create input booleans to control network notifications
input_boolean:
  network_notifications:
    name: Network Notifications
    icon: mdi:bell-ring
    initial: true

  device_alerts:
    name: Device Alerts
    icon: mdi:cellphone-link
    initial: true

# Create template sensors to detect network issues
binary_sensor:
  - platform: template
    sensors:
      internet_connection:
        friendly_name: Internet Connection
        value_template: >
          {{ states('sensor.speedtest_ping') != 'unavailable' }}
        device_class: connectivity

      slow_internet:
        friendly_name: Slow Internet
        value_template: >
          {{ states('sensor.speedtest_download') | float < 20 }}

# ============================================================================
# AUTOMATIONS FOR NETWORK EVENTS
# ============================================================================

automation:
  # Notify when a new device connects to the network
  - id: 'notify_new_device'
    alias: 'Notify when new device connects'
    trigger:
      platform: event
      event_type: device_tracker_new_device
    condition:
      condition: state
      entity_id: input_boolean.device_alerts
      state: 'on'
    action:
      - service: notify.mobile_app_phone
        data:
          title: "New device detected"
          message: "A new device {{ trigger.event.data.host_name }} ({{ trigger.event.data.entity_id }}) connected to your network"
          data:
            tag: new-device
            ttl: 0
            priority: high

  # Notify when Internet is down
  - id: 'notify_internet_down'
    alias: 'Notify when Internet is down'
    trigger:
      platform: state
      entity_id: binary_sensor.internet_connection
      to: 'off'
      for:
        minutes: 2
    condition:
      condition: state
      entity_id: input_boolean.network_notifications
      state: 'on'
    action:
      - service: notify.mobile_app_phone
        data:
          title: "Internet Connection Lost"
          message: "Your internet connection has been down for 2 minutes"
          data:
            tag: internet-down
            ttl: 0
            priority: high

  # Notify when Internet is restored
  - id: 'notify_internet_restored'
    alias: 'Notify when Internet is restored'
    trigger:
      platform: state
      entity_id: binary_sensor.internet_connection
      from: 'off'
      to: 'on'
    condition:
      condition: state
      entity_id: input_boolean.network_notifications
      state: 'on'
    action:
      - service: notify.mobile_app_phone
        data:
          title: "Internet Connection Restored"
          message: "Your internet connection has been restored"
          data:
            tag: internet-restored
            priority: normal

  # Notify when Internet is slow
  - id: 'notify_slow_internet'
    alias: 'Notify when Internet is slow'
    trigger:
      platform: state
      entity_id: binary_sensor.slow_internet
      to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.network_notifications
        state: 'on'
      - condition: state
        entity_id: binary_sensor.internet_connection
        state: 'on'
    action:
      - service: notify.mobile_app_phone
        data:
          title: "Slow Internet Connection"
          message: "Your internet speed is below 20 Mbps ({{ states('sensor.speedtest_download') }} Mbps)"
          data:
            tag: slow-internet
            ttl: 0
            priority: normal

  # Notify when a tracked person arrives home (detected by network)
  - id: notify_person_home
    alias: 'Notify when person arrives home (network detection)'
    trigger:
      platform: state
      entity_id:
        - person.johndoe
        - person.janedoe
      to: 'home'
    condition:
      condition: state
      entity_id: input_boolean.device_alerts
      state: 'on'
    action:
      - service: notify.mobile_app_phone
        data:
          title: "Person Arrived Home"
          message: "{{ trigger.to_state.attributes.friendly_name }} has arrived home"
          data:
            tag: person-home
            priority: normal

  # Monitor and log high network usage
  - id: log_high_network_usage
    alias: 'Log high network usage'
    trigger:
      platform: template
      value_template: >
        {{ (states('sensor.router_wan_in') | float + states('sensor.router_wan_out') | float) > 10000000 }}
    action:
      - service: system_log.write
        data:
          message: "High network traffic detected: {{ (states('sensor.router_wan_in') | float + states('sensor.router_wan_out') | float) | round(2) }} B/s"
          level: warning
      - service: persistent_notification.create
        data:
          title: "High Network Usage"
          message: "Network usage is high ({{ (states('sensor.router_wan_in') | float + states('sensor.router_wan_out') | float) | round(2) }} B/s)"

# ============================================================================
# LOVELACE UI CARD EXAMPLES
# ============================================================================

# Copy these examples to your Lovelace UI configuration
#
# example_view:
#   title: Network
#   cards:
#     - type: entities
#       title: Network Status
#       entities:
#         - binary_sensor.internet_connection
#         - sensor.speedtest_download
#         - sensor.speedtest_upload
#         - sensor.speedtest_ping
#         - binary_sensor.slow_internet
#         - sensor.router_wan_in
#         - sensor.router_wan_out
#
#     - type: glance
#       title: Connected Devices
#       columns: 3
#       entities:
#         - sensor.unifi_clients_wired
#         - sensor.unifi_clients_wireless
#         - binary_sensor.guest_devices_connected
#
#     - type: entity-filter
#       title: People
#       state_filter:
#         - "home"
#       entities:
#         - entity: person.johndoe
#           name: John
#         - entity: person.janedoe
#           name: Jane
#       card:
#         type: glance
#         title: People Home
